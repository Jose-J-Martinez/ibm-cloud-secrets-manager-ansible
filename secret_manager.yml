---
- name: IBM Cloud secrets manager playbook
  hosts: localhost
  connection: local
  vars:
    api_key: "XXXXXXXXXXXXXX"
    hostname_vault: "https://XXXXXXXXXXX.XXXXXXX.secrets-manager.appdomain.cloud"
    secret_groups_name: "secrets_group_test"
    secret_name: "test-kv-secret-playbook"
  tasks:
    - name: Create IAM Token
      uri:
        url: https://iam.cloud.ibm.com/identity/token
        headers:
          Content-Type: application/x-www-form-urlencoded
          Accept: application/json
        body_format: form-urlencoded
        method: POST
        body:
          grant_type: "urn:ibm:params:oauth:grant-type:apikey"
          apikey: "{{ api_key }}"
      register: login

    - block:
      - name: Setting IAMtoken
        set_fact:
          iam_token: "{{ login.json.access_token }}"

      - name: Create Vault Token
        uri:
          url: "{{ hostname_vault }}/v1/auth/ibmcloud/login"
          headers:
            Content-Type: application/json
            Accept: application/json
          body_format: json
          method: PUT
          body: '{"token": "{{ iam_token }}" }'
        register: token_vault_rest_call

      - name: Set vault token
        set_fact:
          vault_token: "{{ token_vault_rest_call.json.auth.client_token }}"

      - name: Query available Secret groups
        uri:
          url: "{{ hostname_vault }}/v1/auth/ibmcloud/manage/groups"
          headers:
            Content-Type: application/json
            X-Vault-Token: "{{ vault_token }}"
          method: GET
        register: secrets_group_rest_call

      - name: Set secrets group id
        set_fact:
          secret_group_id: "{{ secrets_group_rest_call.json.data.groups | json_query(jmesquery) | join('') }}"
        vars:
          jmesquery: "[? name==`{{ secret_groups_name }}`].id"

      - block:
        - name: Create Secret group
          uri:
            url: "{{ hostname_vault }}/v1/auth/ibmcloud/manage/groups"
            headers:
              Accept: application/json
              X-Vault-Token: "{{ vault_token }}"
              Content-Type: application/json
            body_format: json
            method: PUT
            body: '{ "name": "{{ secret_groups_name }}", "description": "Extended description for the secret group." }'
          register: create_secret_group_rest_call

        - name: Set secrets group id
          set_fact:
            secret_group_id: "{{ create_secret_group_rest_call.json.data.id }}"

        when: secret_group_id | length == 0

      - name: Check if the secret is already created
        uri:
          url: "{{ hostname_vault }}/v1/ibmcloud/kv/secrets/groups/{{ secret_group_id }}"
          headers:
            Accept: application/json
            X-Vault-Token: "{{ vault_token }}"
          body_format: json
          method: GET
        register: query_existing_secrets_rest_call

      - name: Set secret id
        set_fact:
          secret_id: "{{ query_existing_secrets_rest_call.json.data.secrets | json_query(jmesquery) | join('') }}"
        vars:
          jmesquery: "[? name==`{{ secret_name }}`].id"


      - name: Create a secret on specific group if not present
        uri:
          url: "{{ hostname_vault }}/v1/ibmcloud/kv/secrets/groups/{{ secret_group_id }}"
          headers:
            Content-Type: application/json
            X-Vault-Token: "{{ vault_token }}"
          body_format: json
          method: POST
          body: '{
            "name": "{{ secret_name }}",
            "description": "Extended description for my secret.",
            "payload": {
              "secret": "This a secret you cannot see this"
            }
          }'
        register: create_secret_rest_call
        when: secret_id | length == 0

      - name: Set secrets ID
        set_fact:
          secret_id: "{{ create_secret_rest_call.json.data.id }}"
        when: create_secret_rest_call.skipped is not defined

      - name: Rotate the secret once
        uri:
          url: "{{ hostname_vault }}/v1/ibmcloud/kv/secrets/groups/{{ secret_group_id }}/{{ secret_id }}/rotate"
          headers:
            Content-Type: application/json
            X-Vault-Token: "{{ vault_token }}"
          body_format: json
          method: POST
          body: '{
            "payload": {
              "secret": "Now I have  new value"
            }
          }'
        register: rotate_secret_rest_call


      when: login.status == 200
